apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafdrop
  labels:
    app: kafdrop
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafdrop
  template:
    metadata:
      name: kafdrop
      labels:
        app: kafdrop
    spec:
      containers:
        - name: kafdrop
          image: obsidiandynamics/kafdrop
          imagePullPolicy: IfNotPresent
          env:
            - name: KAFKA_BROKERCONNECT
              value: "kafka-kafka-bootstrap:9092"
            - name: SCHEMAREGISTRY_CONNECT
              value: "http://schema-registry:8081"
          ports:
            - containerPort: 9000
              protocol: TCP
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: kafdrop
spec:
  selector:
    app: kafdrop
  ports:
    - protocol: TCP
      port: 9000
      targetPort: 9000
  type: ClusterIP
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: kafdrop-vs
  namespace: default
spec:
  hosts:
    - "kafdrop.johnthebest.com"
  gateways:
    - gw
  http:
    - match:
        - uri:
            prefix: /
      rewrite:
        uri: / 
      route:
        - destination:
            host: kafdrop
            port:
              number: 9000
---
#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  name: routing-to-kafdrop
#spec:
#  ingressClassName: nginx
#  rules:
#    - host: kafdrop.johnthebest.com
#      http:
#        paths:
#          - path: /
#            pathType: Prefix
#            backend:
#              service:
#                name: kafdrop
#                port:
#                  number: 9000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-connect-ui
  labels:
    app: kafka-connect-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-connect-ui
  template:
    metadata:
      name: kafka-connect-ui
      labels:
        app: kafka-connect-ui
    spec:
      containers:
        - name: kafka-connect-ui
          image: landoop/kafka-connect-ui
          imagePullPolicy: IfNotPresent
          env:
            - name: CONNECT_URL
              value: http://kafka-connect:8083
          ports:
            - containerPort: 8000
              protocol: TCP
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-connect-ui
spec:
  selector:
    app: kafka-connect-ui
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
  type: ClusterIP
---
#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  name: routing-to-kafka-connect-ui
#spec:
#  ingressClassName: nginx
#  rules:
#    - host: kafka-connect-ui.johnthebest.com
#      http:
#        paths:
#          - path: /
#            pathType: Prefix
#            backend:
#              service:
#                name: kafka-connect-ui
#                port:
#                  number: 8000
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: kafka-coonect-ui-vs
  namespace: default
spec:
  hosts:
    - "kafka-connect-ui.johnthebest.com"
  gateways:
    - gw
  http:
    - match:
        - uri:
            prefix: /
      rewrite:
        uri: / 
      route:
        - destination:
            host: kafka-connect-ui
            port:
              number: 8000
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redpanda
  labels:
    app: redpanda
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redpanda
  template:
    metadata:
      name: redpanda
      labels:
        app: redpanda
    spec:
      containers:
        - name: redpanda
          image: docker.redpanda.com/redpandadata/console:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              protocol: TCP
          env:
#            https://github.com/redpanda-data/console/blob/master/docs/config/console.yaml
            - name: CONFIG_FILEPATH
              value: "/etc/redpanda/config.yml"
          volumeMounts:
            - mountPath: "/etc/redpanda"
              name: redpanda
      volumes:
        - name: redpanda
          configMap:
            name: redpanda
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: redpanda
spec:
  selector:
    app: redpanda
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  type: ClusterIP
---
#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  name: routing-to-redpanda
#spec:
#  ingressClassName: nginx
#  rules:
#    - host: kafka-ui.johnthebest.com
#      http:
#        paths:
#          - path: /
#            pathType: Prefix
#            backend:
#              service:
#                name: redpanda
#                port:
#                  number: 8080
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: gw
  namespace: default
spec:
  selector:
    istio: ingressgateway # użyj domyślnego Ingress Gateway z Istio
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - "*"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: redpanda-vs
  namespace: default
spec:
  hosts:
    - "kafka-ui.johnthebest.com"
  gateways:
    - gw
  http:
    - match:
        - uri:
            prefix: /
      rewrite:
        uri: / 
      route:
        - destination:
            host: redpanda
            port:
              number: 8080
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redpanda
data:
  config.yml: |
    kafka:
      brokers:
      - kafka-kafka-bootstrap:9092
      schemaRegistry:
        enabled: true
        urls: ["http://schema-registry:8081"]
    connect:
      enabled: true
      clusters:
        - name: moj
          url: http://kafka-connect:8083
