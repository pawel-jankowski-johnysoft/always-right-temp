spring:
  cloud:
    stream:
      function:
        bindings:
          # allows to create aliases to functions
          anomalyDetection-in-0: temperature-measurements
          anomalyDetection-out-0: detected-anomalies
      kafka:
        streams:
          bindings:
            temperature-measurements:
              consumer:
                key-serde: "org.apache.kafka.common.serialization.Serdes$LongSerde"
                value-serde: "io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde"
            detected-anomalies:
              producer:
                key-serde: "org.apache.kafka.common.serialization.Serdes$LongSerde"
                value-serde: "io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde"
          binder:
            configuration:
              schema.registry.url: http://localhost:8081
      bindings:
        temperature-measurements:
          group: anomaly-analyzer
          destination: temperature-measurements
        detected-anomalies:
          destination: detected-anomalies
    function:
      definition: anomalyDetection

  kafka:
    bootstrap-servers: kafka:9092
    streams:
      application-id: anomaly-analyzer

anomaly:
  last_recent_measurements: ${ANOMALY_LAST_RECENT_MEASUREMENTS:10}
  anomaly_threshold: ${ANOMALY_THRESHOLD:5}
management:
  endpoints:
    web:
      exposure:
        include: prometheus
server:
  port: 0
